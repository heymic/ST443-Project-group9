col = if(Species[Species=="virginica"]) {"red"} ,
xlab = "Sepal Length", ylab = "Sepal Width", main= "Sepal Length vs. Width, Virginica species is highlighted in red")
legend("topleft", col= c("red","black"),legend = c("virginica","other"), pch= 0.5, bg = "white", cex= 0.7)
plot(Sepal.Length, Sepal.Width,
col = if(Species[Species=="virginica"]) {"red"} ,
xlab = "Sepal Length", ylab = "Sepal Width", main= "Sepal Length vs. Width, Virginica species is highlighted in red")
legend("topleft", col= c("red","black"),legend = c("virginica","other"), pch= 0.5, bg = "white", cex= 0.7)
Species[Species=="virginica"]
Species=="virginica"
plot(Sepal.Length, Sepal.Width,
col = if(Species=="virginica") {"red"} ,
xlab = "Sepal Length", ylab = "Sepal Width", main= "Sepal Length vs. Width, Virginica species is highlighted in red")
legend("topleft", col= c("red","black"),legend = c("virginica","other"), pch= 0.5, bg = "white", cex= 0.7)
plot(Sepal.Length, Sepal.Width,
col = if(Species=="virginica") {"red"} else {"black"},
xlab = "Sepal Length", ylab = "Sepal Width", main= "Sepal Length vs. Width, Virginica species is highlighted in red")
legend("topleft", col= c("red","black"),legend = c("virginica","other"), pch= 0.5, bg = "white", cex= 0.7)
plot(Sepal.Length, Sepal.Width,
col = ifelse(Species=="virginica","red","black"),
xlab = "Sepal Length", ylab = "Sepal Width", main= "Sepal Length vs. Width, Virginica species is highlighted in red")
legend("topleft", col= c("red","black"),legend = c("virginica","other"), pch= 0.5, bg = "white", cex= 0.7)
iris
plot(Sepal.Length, Sepal.Width,
col = ifelse(Species=="virginica","red","black"),
xlab = "Sepal Length",
ylab = "Sepal Width",
main= "Sepal Length vs Width, Virginica species in red")
legend("topleft", col= c("red","black"),legend = c("virginica","other"), pch= 0.5)
plot(Sepal.Length, Sepal.Width,
col = ifelse(Species=="virginica","red","black"),
xlab = "Sepal Length",
ylab = "Sepal Width",
main= "Sepal Length vs Width, Virginica species in red")
legend("topleft", col= c("red","black"),legend = c("virginica","other"), pch= 0.5, bg = "white", cex= 0.7)
plot(Sepal.Length, Sepal.Width,
col = ifelse(Species=="virginica","red","black"),
xlab = "Sepal Length",
ylab = "Sepal Width",
main= "Sepal Length vs Width, Virginica species in red")
legend("topleft", col= c("red","black"),legend = c("virginica","other"), pch= "o")
plot(Sepal.Length, Sepal.Width,
col = ifelse(Species=="virginica","red","black"),
xlab = "Sepal Length",
ylab = "Sepal Width",
main= "Sepal Length vs Width, Virginica species in red")
legend("topright", col= c("red","black"),legend = c("virginica","other"), pch= "o")
data(mtcars)
attach(mtcars)
View(mtcars)
View(mtcars)
?as.factor
mtcars[,"am_factor"] = as.factor(mtcars$am, levels = c ("manual", "automatic"))
mtcars[,"am_factor"] = as.factor(mtcars$am, levels = c ("manual", "automatic"))
mtcars["am_factor"] = as.factor(mtcars$am, levels = c ("manual", "automatic"))
mtcars$am_factor = as.factor(mtcars$am, levels = c ("manual", "automatic"))
mtcars$am_factor = as.factor(mtcars$am, levels = c("manual", "automatic"))
mtcars$am_factor = as.factor(am, levels = c("manual", "automatic"))
head(mtcars,5)
mtcars$am[1:4]
am_factor = as.factor(mtcars$am)
levels(am_factor) = c("automatic","manual")
mtcars=cbind(mtcars, am_factor)
mtcars
data(mtcars)
attach(mtcars)
View(mtcars)
mtcars$am_factor = as.factor(am)
mtcars$am_factor = as.factor(am, levels = c("automatic", "manual"))
mtcars$am_factor = factor(am, levels = c("automatic", "manual"))
?factor
data(mtcars)
#attach(mtcars)
#View(mtcars)
View(mtcars)
View(mtcars)
mtcars$am_factor = as.factor(mtcars$am, levels = c("automatic", "manual"))
mtcars$am_factor = factor(mtcars$am, levels = c("automatic", "manual"))
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"))
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"))
class(mtcars$am_factor)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c(0,1))
class(mtcars$am_factor)
head(mtcars,5)
mtcars$am[1:4]
am_factor = as.factor(mtcars$am)
levels(am_factor) = c("automatic","manual")
mtcars=cbind(mtcars, am_factor)
mtcars
head(mtcars,5)
mtcars$am[1:4]
am_factor = as.factor(mtcars$am)
levels(am_factor) = c("automatic","manual")
mtcars=cbind(mtcars, am_factor)
class(mtcars$am_factor)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c(0,1))
class(mtcars$am_factor)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c("automatic", "manual"))
class(mtcars$am_factor)
data(mtcars)
#attach(mtcars)
#View(mtcars)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c("automatic", "manual"))
class(mtcars$am_factor)
data(mtcars)
#attach(mtcars)
#View(mtcars)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c("automatic", "manual"))
class(mtcars$am_factor)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c("automatic", "manual"))
class(mtcars$am_factor)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c("automatic", "manual"))
levels(mtcars$am_factor)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c(0, 1))
levels(mtcars$am_factor)
View(mtcars)
View(mtcars)
mpg_splitted = split(mtcars$mpg, mtcars$am_factor)
View(mpg_splitted)
View(mpg_splitted)
head(mtcars,5)
mtcars$am[1:4]
am_factor = as.factor(mtcars$am)
levels(am_factor) = c("automatic","manual")
mtcars=cbind(mtcars, am_factor)
class(mtcars$am_factor)
mpg_split = split(mtcars$mpg, am_factor)
median_mpg = c(median(mpg_split$automatic), median(mpg_split$manual))
cat("The median MPG for automatics is: " , median_mpg[1], "\n",
"The median MPG for manuals is: ", median_mpg[2])
cat("\n","Using sapply" ,"\n")
sapply(mpg_split, median)
cat("Using lapply" ,"\n")
lapply(mpg_split, median)
View(mpg_splitted)
View(mpg_splitted)
?mtcars
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c(0, 1))
levels(mtcars$am_factor)
data(mtcars)
#attach(mtcars)
#View(mtcars)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c(0, 1))
levels(mtcars$am_factor)
data(mtcars)
#attach(mtcars)
#View(mtcars)
mtcars$am_factor = factor(mtcars$am, labels = c("automatic", "manual"), levels = c(0, 1))
levels(mtcars$am_factor)
mpg_splitted = split(mtcars$mpg, mtcars$am_factor)
?lapply(list, function)
?lapply
?sapply
median_mpg_automatic = median(mpg_splitted$automatic)
median_mpg_manual = median(mpg_splitted$manual)
cat("median of the automatic:", median_mpg_automatic)
cat("median of the manual:", median_mpg_manual)
cat("Using lapply")
lapply(mpg_splitted, median)
median_mpg_automatic = median(mpg_splitted$automatic)
median_mpg_manual = median(mpg_splitted$manual)
cat("median of the automatic:", median_mpg_automatic)
cat("median of the manual:", median_mpg_manual)
print("----------")
cat("Using lapply")
lapply(mpg_splitted, median)
median_mpg_automatic = median(mpg_splitted$automatic)
median_mpg_manual = median(mpg_splitted$manual)
cat("median of the automatic:", median_mpg_automatic)
cat("median of the manual:", median_mpg_manual)
print("\n----------")
cat("Using lapply")
lapply(mpg_splitted, median)
median_mpg_automatic = median(mpg_splitted$automatic)
median_mpg_manual = median(mpg_splitted$manual)
cat("median of the automatic:", median_mpg_automatic)
cat("median of the manual:", median_mpg_manual)
print(\n, "----------")
median_mpg_automatic = median(mpg_splitted$automatic)
median_mpg_manual = median(mpg_splitted$manual)
cat("median of the automatic:", median_mpg_automatic)
cat("median of the manual:", median_mpg_manual)
cat("\n----------")
cat("Using lapply")
lapply(mpg_splitted, median)
median_mpg_automatic = median(mpg_splitted$automatic)
median_mpg_manual = median(mpg_splitted$manual)
cat("median of the automatic:", median_mpg_automatic)
cat("median of the manual:", median_mpg_manual)
cat("\n----------\n")
cat("Using lapply")
lapply(mpg_splitted, median)
median_mpg_automatic = median(mpg_splitted$automatic)
median_mpg_manual = median(mpg_splitted$manual)
cat("median of the automatic:", median_mpg_automatic)
cat("median of the manual:", median_mpg_manual)
cat("\n----------\n")
cat("Using lapply\n")
lapply(mpg_splitted, median)
medians_mpg = c(median(mpg_splitted$automatic), median(mpg_splitted$manual))
cat("median of the automatic and manual:", median_mpg)
medians_mpg = c(median(mpg_splitted$automatic), median(mpg_splitted$manual))
cat("median of the automatic and manual:", medians_mpg)
cat("\n----------\n")
cat("Using lapply\n")
lapply(mpg_splitted, median)
medians_mpg = c(median(mpg_splitted$automatic), median(mpg_splitted$manual))
cat("median of the automatic and manual:", medians_mpg)
cat("\n----------\n")
cat("Using lapply\n")
class(lapply(mpg_splitted, median))
medians_mpg = c(median(mpg_splitted$automatic), median(mpg_splitted$manual))
cat("median of the automatic and manual:", medians_mpg)
cat("\n----------\n")
cat("Using lapply\n")
lapply(mpg_splitted, median)
cat("\n----------\n")
class(lapply(mpg_splitted, median))
class(medians_mpg)
medians_mpg = c(median(mpg_splitted$automatic), median(mpg_splitted$manual))
cat("median of the automatic and manual:", medians_mpg)
cat("\n----------\n")
cat("Using lapply\n")
lapply(mpg_splitted, median)
cat("\n----------\n")
class(medians_mpg) # this is a vector
class(lapply(mpg_splitted, median)) # this is a list
# difference is that one is a vector and one is a list. See the comments
medians_mpg = c(median(mpg_splitted$automatic), median(mpg_splitted$manual))
cat("Median of the automatic and manual respectively :", medians_mpg)
cat("\n----------\n")
cat("Using lapply\n")
lapply(mpg_splitted, median)
cat("\n----------\n")
class(medians_mpg) # this is a vector
class(lapply(mpg_splitted, median)) # this is a list
# difference is that one is a vector and one is a list. See the comments
medians_mpg = c(median(mpg_splitted$automatic), median(mpg_splitted$manual))
cat("Median of the automatic and manual respectively:", medians_mpg)
cat("\n----------\n")
cat("Using lapply\n")
lapply(mpg_splitted, median)
cat("\n----------\n")
class(medians_mpg) # this is a vector
class(lapply(mpg_splitted, median)) # this is a list
# difference is that one is a vector and one is a list. See the comments
hello = function(firstname, lastname, title= 'Ms.') {
if (lastname == NULL){
return(paste("Hey, ",firstname,"!", sep=""))
}
else {
return(paste("Hello,",title, firstname, lastname, sep = " "))
}
}
#Tests
hello("Joe","Blogs", title= "Capn.")
hello = function(firstname, lastname, title= 'Ms.') {
if (lastname != NULL){
return(paste("Hey, ",firstname,"!", sep=""))
}
else {
return(paste("Hello,",title, firstname, lastname, sep = " "))
}
}
#Tests
hello("Joe","Blogs", title= "Capn.")
hello = function(firstname, lastname, title= 'Ms.') {
if (missing(lastname)){
return(paste("Hey, ",firstname,"!", sep=""))
}
else {
return(paste("Hello,",title, firstname, lastname, sep = " "))
}
}
#Tests
hello("Joe","Blogs", title= "Capn.")
hello("Nancy")
hello = function(firstname, lastname, title= 'Ms.') {
if (missing(lastname) = NULL){
hello = function(firstname, lastname, title= 'Ms.') {
if (missing(lastname) == NULL){
return(paste("Hey, ",firstname,"!", sep=""))
}
else {
return(paste("Hello,",title, firstname, lastname, sep = " "))
}
}
#Tests
hello("Joe","Blogs", title= "Capn.")
hello = function(firstname, lastname, title= 'Ms.') {
if (missing(lastname)){
return(paste("Hey, ",firstname,"!", sep=""))
}
else {
return(paste("Hello,",title, firstname, lastname, sep = " "))
}
}
#Tests
hello("Joe","Blogs", title= "Capn.")
hello("Nancy")
hello = function(firstname, lastname, title= 'Ms.') {
if (missing(lastname)){
return(paste("Hey, ",firstname,"!", sep=""))
}
else {
return(paste("Hello,",title, firstname, lastname, sep = " "))
}
}
hello = function(firstname, lastname, title= 'Ms.') {
if (missing(lastname)){
return(paste("Hey, ",firstname,"!", sep=""))
}
else {
return(paste("Hello,",title, firstname, lastname, sep = " "))
}
}
hello("Michaelo","Angelo", title= "Seinor.")
hello("Angelo di Maria")
hello = function(firstname, lastname = NULL, title= 'Ms.') {
if (missing(lastname)){
return(paste("Hey, ",firstname,"!", sep=""))
}
else {
return(paste("Hello,",title, firstname, lastname, sep = " "))
}
}
hello("Michaelo","Angelo", title= "Seinor.")
hello("Angelo di Maria")
fibonacci = function(n){
fibo_vals <- numeric(n)
fibo_vals[1] <- 1
fibo_vals[2] <- 1
for (i in 3:n) {
fibo_vals[i] <- fibo_vals[i-1]+fibo_vals[i-2]
}
print(fibo_vals)
}
fibonacci(20)
# from https://www.programiz.com/r-programming/examples/fibonacci-recursion
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
# take input from the user
nterms = as.integer(readline(prompt="How many terms? "))
# check if the number of terms is valid
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
}
# from https://www.programiz.com/r-programming/examples/fibonacci-recursion
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
# take input from the user
#nterms = as.integer(readline(prompt="How many terms? "))
nterms = 20
# check if the number of terms is valid
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
}
#this soultion shoud be quicker but it is more complicated and one doesn't know at first glance what is doing on
# from https://www.r-bloggers.com/example-7-1-create-a-fibonacci-sequence/
fibonacci = function(len){
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
}
fibonacci(20)
# Use a for loop - quite computionally costly. One could do better when used vectors.
# from https://www.r-bloggers.com/example-7-1-create-a-fibonacci-sequence/
fibonacci = function(len){
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
}
fibonacci(20)
# Use a for loop - quite computionally costly. One could do better when used vectors.
# from https://www.r-bloggers.com/example-7-1-create-a-fibonacci-sequence/
fibonacci = function(len){
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
}
print(fibonacci(20))
# Use a for loop - quite computionally costly. One could do better when used vectors.
# from https://www.r-bloggers.com/example-7-1-create-a-fibonacci-sequence/
fibonacci = function(len){
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
}
fibonacci(20)
# Use a for loop - quite computionally costly. One could do better when used vectors.
# from https://www.r-bloggers.com/example-7-1-create-a-fibonacci-sequence/
fibonacci = function(len){
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
print(fibvals)
}
}
fibonacci(20)
# Use a for loop - quite computionally costly. One could do better when used vectors.
# from https://www.r-bloggers.com/example-7-1-create-a-fibonacci-sequence/
fibonacci = function(len){
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
print(fibvals)
}
}
fibonacci(20)
# Use a for loop - quite computionally costly. One could do better when used vectors.
# from https://www.r-bloggers.com/example-7-1-create-a-fibonacci-sequence/
fibonacci = function(len){
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
print(fibvals)
}
fibonacci(20)
# Use a for loop - quite computionally costly. One could do better when used vectors.
iris_matrix = data.matrix(iris)
#View(iris_matrix)
cat("the range of the of Species column is:", range(iris_matrix[,'Species']))
#A
library(ISLR)
attach(OJ)
set.seed(1013)
train = sample(dim(OJ)[1], 800)
OJ.train = OJ[train, ]
OJ.test = OJ[-train, ]
#A
library(ISLR)
attach(OJ)
set.seed(42)
train = sample(dim(OJ)[1], 800)
OJ.train = OJ[train, ]
OJ.test = OJ[-train, ]
B
#B
library(tree)
oj.tree = tree(Purchase ~ ., data = OJ.train)
summary(oj.tree)
#C
oj.tree
View(oj.tree)
View(oj.tree)
View(OJ.test)
View(OJ.test)
#C
oj.tree
#D
plot(oj.tree)
text(oj.tree, pretty = 0)
table(OJ.test$Purchase, oj.pred)
oj.pred = predict(oj.tree, OJ.test, type = "class")
table(OJ.test$Purchase, oj.pred)
cv.oj = cv.tree(oj.tree, FUN = prune.tree)
#G
plot(cv.oj$size, cv.oj$dev, type = "b", xlab = "Tree Size", ylab = "Deviance")
oj.pruned = prune.tree(oj.tree, best = 8)
#IT IS THE SAME ONE
summary(oj.pruned)
pred.unpruned = predict(oj.tree, OJ.test, type = "class")
misclass.unpruned = sum(OJ.test$Purchase != pred.unpruned)
misclass.unpruned/length(pred.unpruned)
pred.pruned = predict(oj.pruned, OJ.test, type = "class")
misclass.pruned = sum(OJ.test$Purchase != pred.pruned)
misclass.pruned/length(pred.pruned)
library(haven)
ghs05client <- read_dta("C:/Users/Michal/Desktop/UKDA-5640-stata8/stata8/ghs05client.dta")
View(ghs05client)
setwd("C:/Users/Michal/Documents/01- Master Degree/GitHub/ST443-Project-group9")
write.table(ghs05client, file = "ghs.csv",row.names=FALSE, col.names=TRUE, sep=",")
write.csv(MyData, file = "ghs2.csv",row.names=FALSE)
write.csv(ghs05client, file = "ghs2.csv",row.names=FALSE)
