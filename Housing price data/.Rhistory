table(df$MasVnrType)
df$MasVnrType[which(is.na(df$MasVnrType))] <- "None"
table(df$MasVnrType)
df$MasVnrArea[which(is.na(df$MasVnrArea))] <- mean(df$LotFrontage,na.rm = T)
table(df$BsmtQual)
df$BsmtQual[which(is.na(df$BsmtQual))] <- "None"
table(df$BsmtQual)
table(df$BsmtCond)
df$BsmtCond[which(is.na(df$BsmtBsmtCond))] <- "None"
table(df$BsmtCond)
table(df$BsmtCond)
df$BsmtCond[which(is.na(df$BsmtCond))] <- "None"
table(df$BsmtCond)
table(df$BsmtExposure)
df$BsmtExposure[which(is.na(df$BsmtExposure))] <- "None"
table(df$BsmtExposure)
table(df$BsmtFinType1)
df$BsmtFinType1[which(is.na(df$BsmtFinType1))] <- "None"
table(df$BsmtFinType1)
table(df$BsmtFinType2)
df$BsmtFinType2[which(is.na(df$BsmtFinType2))] <- "None"
table(df$BsmtFinType2)
table(df$Electrical)
table(df$Electrical)
df$Electrical[which(is.na(df$Electrical))] <- "None"
table(df$Electrical)
table(df$FireplaceQu)
table(df$FireplaceQu)
df$FireplaceQu[which(is.na(df$FireplaceQu))] <- "None"
table(df$FireplaceQu)
table(df$GarageType)
df$GarageType[which(is.na(df$GarageType))] <- "None"
table(df$GarageType)
str(df)
table(df$GarageYrBlt)
df$GarageYrBlt[which(is.na(df$GarageYrBlt))] <- 0
table(df$GarageYrBlt)
train = read.csv("train.csv", row.names = "Id", stringsAsFactors=FALSE)
testing_kaggle = read.csv("test.csv", row.names = "Id", stringsAsFactors=FALSE)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,test)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,test_kaggle)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
hist(df$SalePrice)
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- median(df$LotFrontage,na.rm = T)
table(df$Alley)
df$Alley[which(is.na(df$Alley))] <- "None"
table(df$MasVnrType)
df$MasVnrType[which(is.na(df$MasVnrType))] <- "None"
table(df$MasVnrType)
df$MasVnrArea[which(is.na(df$MasVnrArea))] <- mean(df$LotFrontage,na.rm = T)
table(df$BsmtCond)
df$BsmtCond[which(is.na(df$BsmtCond))] <- "None"
table(df$BsmtCond)
table(df$BsmtExposure)
df$BsmtExposure[which(is.na(df$BsmtExposure))] <- "None"
table(df$BsmtExposure)
table(df$Electrical)
df$Electrical[which(is.na(df$Electrical))] <- "None"
table(df$Electrical)
table(df$FireplaceQu)
df$FireplaceQu[which(is.na(df$FireplaceQu))] <- "None"
table(df$FireplaceQu)
table(df$GarageType)
df$GarageType[which(is.na(df$GarageType))] <- "None"
table(df$GarageType)
table(df$GarageYrBlt)
df$GarageYrBlt[which(is.na(df$GarageYrBlt))] <- 0
table(df$GarageYrBlt)
df$OverallCond <- as.factor(df$OverallCond)
df$OverallQual <- as.factor(df$OverallQual)
str(df)
colSums(sapply(df, is.na))
colSums(sapply(train, is.na))
levels(df$MSZoning) <- c(levels(df$MSZoning),"None")
levels(df$MSZoning) <- c(levels(df$MSZoning),"None")
levels(df$MSZoning) <- c(levels(df$MSZoning),"None")
class(df$MSZoning)
for(i in colnames(df[,sapply(df, is.character)])){
df[,i][which(is.na(df[,i]))] <- "None"
}
colSums(sapply(df, is.na))
train = read.csv("train.csv", row.names = "Id", stringsAsFactors=FALSE)
testing_kaggle = read.csv("test.csv", row.names = "Id", stringsAsFactors=FALSE)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
hist(df$SalePrice)
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i][which(is.na(df[,i]))] <- "None"
}
colSums(sapply(df, is.na))
table(df$BsmtFinSF1)
table(df$BsmtFinSF1)
table(df$BsmtFinSF2)
which(is.na(df$BsmtFinSF1))
table(df$BsmtFinSF2)
which(is.na(df$BsmtFinSF1))
df[2121,]
df$BsmtFinSF1
table(df$BsmtFinSF1)
table(df$BsmtFinSF1)
table(df$BsmtFinSF2)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF",
range(df$BsmtFullBath)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF")
range(df$BsmtFullBath)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF")
range(df$BsmtFullBath, na.rm = T)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF")
table(df$BsmtFullBath)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF", "BsmtFullBath", "BsmtHalfBath", "GarageYrBlt", "GarageCars", "")
table(df$GarageArea)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF", "BsmtFullBath", "BsmtHalfBath", "GarageYrBlt", "GarageCars", "GarageArea")
for(i in x){
df[,i][which(is.na(df[,i]))] <- 0
}
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- mean(df$LotFrontage,na.rm = T)
df$MasVnrArea[which(is.na(df$MasVnrArea))] <- mean(df$LotFrontage,na.rm = T)
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i] <- as.factor(df[,i])
}
str(df)
# These are also categorical Variables
df$OverallCond <- as.factor(df$OverallCond)
df$OverallQual <- as.factor(df$OverallQual)
str(df)
setwd("C:/Users/Michal/Documents/01- Master Degree/GitHub/ST443-Project-group9/Housing price data")
getwd()
train = read.csv("train.csv", row.names = "Id", stringsAsFactors=FALSE)
testing_kaggle = read.csv("test.csv", row.names = "Id", stringsAsFactors=FALSE)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
hist(df$SalePrice)
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i][which(is.na(df[,i]))] <- "None"
}
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- mean(df$LotFrontage,na.rm = T)
df$MasVnrArea[which(is.na(df$MasVnrArea))] <- mean(df$LotFrontage,na.rm = T)
table(df$GarageYrBlt)
df$GarageYrBlt[which(is.na(df$GarageYrBlt))] <- 0
table(df$GarageYrBlt)
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- mean(df$LotFrontage,na.rm = T)
df$MasVnrArea[which(is.na(df$MasVnrArea))] <- mean(df$LotFrontage,na.rm = T)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF", "BsmtFullBath", "BsmtHalfBath", "GarageYrBlt", "GarageCars", "GarageArea")
for(i in x){
df[,i][which(is.na(df[,i]))] <- 0
}
for(i in colnames(df[,sapply(df, is.character)])){
df[,i] <- as.factor(df[,i])
}
# These are also categorical Variables
df$OverallCond <- as.factor(df$OverallCond)
df$OverallQual <- as.factor(df$OverallQual)
str(df)
# These are also categorical Variables
df$MSSubClass <- as.factor(df$MSSubClass)
df$OverallCond <- as.factor(df$OverallCond)
df$OverallQual <- as.factor(df$OverallQual)
str(df)
train <- df[df$isTrain==1,]
test <- df[df$isTrain==0,]
View(train)
smp_size = floor(0.75 * nrow(train))
set.seed(1)
smp_size = floor(0.8 * nrow(train))
set.seed(1)
?seq_len
smp_size = floor(0.8 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
K <- 10
set.seed(11)
folds <-sample(rep(1:10, length=nrow(train)))
folds
table(folds)
## We initialize a error matrix with row (10 different folds) and column (19 different predictors)
cv.errors <-matrix(0, 10, 19)
K <- 10
set.seed(11)
folds <-sample(rep(1:10, length=nrow(train)))
table(folds)
## We initialize a error matrix with row (10 different folds) and column (19 different predictors)
cv.errors <-matrix(0, 10, 19)
train <- df[df$isTrain==1,]
test <- df[df$isTrain==0,]
train$isTrain <- NULL
## We write a for loop that performs cross-validation, in the kth fold, the elements of folds that equal k are in the test set and the remiander are in the training set
for(k in 1:10){
fit.fwd <- regsubsets(SalePrice~., data=train[folds!=k,], nvmax=19)
for(i in 1:19){
pred <-predict(fit.fwd, train[folds==k,], id=i)
cv.errors[k,i] <-mean((train$SalePrice[folds==k]-pred)^2)
}
}
library(boot)
library(leaps)
## We write a for loop that performs cross-validation, in the kth fold, the elements of folds that equal k are in the test set and the remiander are in the training set
for(k in 1:10){
fit.fwd <- regsubsets(SalePrice~., data=train[folds!=k,], nvmax=19)
for(i in 1:19){
pred <-predict(fit.fwd, train[folds==k,], id=i)
cv.errors[k,i] <-mean((train$SalePrice[folds==k]-pred)^2)
}
}
## We write a for loop that performs cross-validation, in the kth fold, the elements of folds that equal k are in the test set and the remiander are in the training set
for(k in 1:10){
fit.fwd <- regsubsets(SalePrice~., data=train[folds!=k,], nvmax=19)
for(i in 1:19){
pred <-predict(fit.fwd, train[folds==k,], id=i)
cv.errors[k,i] <-mean((train$SalePrice[folds==k]-pred)^2)
}
}
## We write a for loop that performs cross-validation, in the kth fold, the elements of folds that equal k are in the test set and the remiander are in the training set
for(k in 1:10){
fit.fwd <- regsubsets(SalePrice~., data=train[folds!=k,], nvmax=19, method = "forward")
for(i in 1:19){
pred <-predict(fit.fwd, train[folds==k,], id=i)
cv.errors[k,i] <-mean((train$SalePrice[folds==k]-pred)^2)
}
}
library(ISLR)
?Hitters
summary(Hitters)
fix(Hitters)
#Hitters$Salary
## Some missing values in Salary
sum(is.na(Hitters$Salary))
regfit.full  <-regsubsets(SalePrice~., data=train)
regfit.full  <-regsubsets(SalePrice~., data=train)
install.packages("Caret")
install.packages("caret")
library(caret)
myControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
model_lm = train(SalePrice ~ .,
data = train,
method = "lm",
trControl = myControl)
model_lm
?regsubsets
## We write a for loop that performs cross-validation, in the kth fold, the elements of folds that equal k are in the test set and the remiander are in the training set
for(k in 1:10){
fit.fwd <- regsubsets(SalePrice~., data=train[folds!=k,], nvmax=19, method = "forward", really.big=TRUE)
for(i in 1:19){
pred <-predict(fit.fwd, train[folds==k,], id=i)
cv.errors[k,i] <-mean((train$SalePrice[folds==k]-pred)^2)
}
}
?trainControl
myControl = trainControl(method = "cv", number = 10, verboseIter = FALSE)
model_lm = train(SalePrice ~ .,
data = train,
method = "lm",
trControl = myControl)
model_lm
myControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
model_lm = train(SalePrice ~ .,
data = train,
method = "lm",
trControl = myControl)
model_lm
model_rf = train(SalePrice ~ .,
data = train,
tuneLength = 1,
method = "ranger",
importance = 'impurity',
trControl = myControl)
model_rf
model_rf2 = train(SalePrice ~ .,
data = train,
tuneLength = 2,
method = "ranger",
importance = 'impurity',
trControl = myControl)
model_rf2
fit.glmnet <- train(SalePrice~.,train,trControl = myTrainControl,
method="glmnet",tuneGrid=expand.grid(.alpha = seq(0,1,by=0.05),
.lambda = seq(0, 0.08, by = 0.01)))
fit.glmnet <- train(SalePrice~.,train,trControl = myControl,
method="glmnet",tuneGrid=expand.grid(.alpha = seq(0,1,by=0.05),
.lambda = seq(0, 0.08, by = 0.01)))
print(fit.glmnet)
set.seed(100)
inTrain <- createDataPartition(train$SalePrice, p=0.7, list=FALSE)
str(inTrain)
inTrain
saleTrain <- train[inTrain,]
saleTest <- train[-inTrain,]
myTrainControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
fit.glmnet <- train(SalePrice~.-Id,saleTrain,trControl = myTrainControl,
method="glmnet",tuneGrid=expand.grid(.alpha = seq(0,1,by=0.05),
.lambda = seq(0, 0.08, by = 0.01)))
set.seed(100)
inTrain <- createDataPartition(train$SalePrice, p=0.7, list=FALSE)
str(inTrain)
#inTrain
saleTrain <- train[inTrain,]
saleTest <- train[-inTrain,]
myTrainControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
fit.glmnet <- train(SalePrice~.,saleTrain,trControl = myTrainControl,
method="glmnet",tuneGrid=expand.grid(.alpha = seq(0,1,by=0.05),
.lambda = seq(0, 0.08, by = 0.01)))
predicted <- predict(fit.glmnet, saleTest)
mmetric(saleTest$SalePrice, predicted, metric=c("RMSE","R2"))
set.seed(100)
inTrain <- createDataPartition(train$SalePrice, p=0.7, list=FALSE)
str(inTrain)
#inTrain
saleTrain <- train[inTrain,]
saleTest <- train[-inTrain,]
myTrainControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
fit.glmnet <- train(SalePrice~.,saleTrain,trControl = myTrainControl,
method="glmnet",tuneGrid=expand.grid(.alpha = seq(0,1,by=0.05),
.lambda = seq(0, 0.08, by = 0.01)))
predicted <- predict(fit.glmnet, saleTest)
metric(saleTest$SalePrice, predicted, metric=c("RMSE","R2"))
install.packages("rminer")
library(rminer)
set.seed(100)
inTrain <- createDataPartition(train$SalePrice, p=0.7, list=FALSE)
str(inTrain)
#inTrain
saleTrain <- train[inTrain,]
saleTest <- train[-inTrain,]
myTrainControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
fit.glmnet <- train(SalePrice~.,saleTrain,trControl = myTrainControl,
method="glmnet",tuneGrid=expand.grid(.alpha = seq(0,1,by=0.05),
.lambda = seq(0, 0.08, by = 0.01)))
predicted <- predict(fit.glmnet, saleTest)
mmetric(saleTest$SalePrice, predicted, metric=c("RMSE","R2"))
x = mmetric(saleTest$SalePrice, predicted, metric=c("RMSE","R2"))
x
round(x)
round(x, digits = 2)
saleTest$SalePrice - predicted
mean((saleTest$SalePrice - predicted)^2)
sqrt(mean((saleTest$SalePrice - predicted)^2))
sqrt(mean((saleTest$SalePrice - predicted)^2))/mean(saleTest$SalePrice)
sqrt(mean((saleTest$SalePrice - predicted)^2))/max(saleTest$SalePrice)
sqrt(mean((saleTest$SalePrice - predicted)^2))/mean(saleTest$SalePrice)
setwd("C:/Users/Michal/Documents/01- Master Degree/GitHub/ST443-Project-group9/Housing price data")
getwd()
train = read.csv("train.csv", row.names = "Id", stringsAsFactors=FALSE)
testing_kaggle = read.csv("test.csv", row.names = "Id", stringsAsFactors=FALSE)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
hist(df$SalePrice)
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i][which(is.na(df[,i]))] <- "None"
}
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- median(df$LotFrontage,na.rm = T)
df$MasVnrArea[which(is.na(df$MasVnrArea))] <- mean(df$LotFrontage,na.rm = T)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF", "BsmtFullBath", "BsmtHalfBath", "GarageYrBlt", "GarageCars", "GarageArea")
for(i in x){
df[,i][which(is.na(df[,i]))] <- 0
}
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i] <- as.factor(df[,i])
}
# These are also categorical Variables
df$MSSubClass <- as.factor(df$MSSubClass)
df$OverallCond <- as.factor(df$OverallCond)
df$OverallQual <- as.factor(df$OverallQual)
str(df)
train <- df[df$isTrain==1,]
test <- df[df$isTrain==0,]
train$isTrain <- NULL
smp_size = floor(0.8 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
library(boot)
library(leaps)
# FROM CLASS 5
K <- 10
set.seed(11)
folds <-sample(rep(1:10, length=nrow(train)))
table(folds)
## We initialize a error matrix with row (10 different folds) and column (19 different predictors)
cv.errors <-matrix(0, 10, 19)
## We write a for loop that performs cross-validation, in the kth fold, the elements of folds that equal k are in the test set and the remiander are in the training set
for(k in 1:10){
fit.fwd <- regsubsets(SalePrice~., data=train[folds!=k,], nvmax=19, method = "forward", really.big=TRUE)
for(i in 1:19){
pred <-predict(fit.fwd, train[folds==k,], id=i)
cv.errors[k,i] <-mean((train$SalePrice[folds==k]-pred)^2)
}
}
setwd("C:/Users/Michal/Documents/01- Master Degree/GitHub/ST443-Project-group9/Housing price data")
getwd()
train = read.csv("train.csv", row.names = "Id", stringsAsFactors=FALSE)
testing_kaggle = read.csv("test.csv", row.names = "Id", stringsAsFactors=FALSE)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
hist(df$SalePrice)
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i][which(is.na(df[,i]))] <- "None"
}
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- median(df$LotFrontage,na.rm = T)
df$MasVnrArea[which(is.na(df$MasVnrArea))] <- mean(df$LotFrontage,na.rm = T)
x = c("BsmtFinSF1","BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF", "BsmtFullBath", "BsmtHalfBath", "GarageYrBlt", "GarageCars", "GarageArea")
for(i in x){
df[,i][which(is.na(df[,i]))] <- 0
}
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i] <- as.factor(df[,i])
}
# These are also categorical Variables
df$MSSubClass <- as.factor(df$MSSubClass)
df$OverallCond <- as.factor(df$OverallCond)
df$OverallQual <- as.factor(df$OverallQual)
str(df)
train <- df[df$isTrain==1,]
test <- df[df$isTrain==0,]
train$isTrain <- NULL
smp_size = floor(0.8 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
library(boot)
library(leaps)
# FROM CLASS 5
K <- 10
set.seed(11)
folds <-sample(rep(1:10, length=nrow(train)))
table(folds)
## We initialize a error matrix with row (10 different folds) and column (19 different predictors)
cv.errors <-matrix(0, 10, 19)
library(caret)
myControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
model_lm = train(SalePrice ~ .,
data = train,
method = "lm",
trControl = myControl)
model_lm
myControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
model_lm = train(SalePrice ~ .,
data = train,
method = "lm",
trControl = myControl)
model_lm
model_rf = train(SalePrice ~ .,
data = train,
tuneLength = 1,
method = "ranger",
importance = 'impurity',
trControl = myControl)
model_rf
model_rf2 = train(SalePrice ~ .,
data = train,
tuneLength = 2,
method = "ranger",
importance = 'impurity',
trControl = myControl)
model_rf2
fit.glmnet <- train(SalePrice~.,train,trControl = myControl,
method="glmnet",tuneGrid=expand.grid(.alpha = seq(0,1,by=0.05),
.lambda = seq(0, 0.08, by = 0.01)))
print(fit.glmnet)
library(rminer)
set.seed(100)
inTrain <- createDataPartition(train$SalePrice, p=0.7, list=FALSE)
str(inTrain)
#inTrain
saleTrain <- train[inTrain,]
saleTest <- train[-inTrain,]
myTrainControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
fit.glmnet <- train(SalePrice~.,saleTrain,trControl = myTrainControl,
method="glmnet",tuneGrid=expand.grid(.alpha = seq(0,1,by=0.05),
.lambda = seq(0, 0.08, by = 0.01)))
predicted <- predict(fit.glmnet, saleTest)
mmetric(saleTest$SalePrice, predicted, metric=c("RMSE","R2"))
sqrt(mean((saleTest$SalePrice - predicted)^2))/mean(saleTest$SalePrice)
myControl = trainControl(method = "cv", number = 5, verboseIter = FALSE)
model_lm = train(SalePrice ~ .,
data = train,
method = "lm",
trControl = myControl)
model_lm
