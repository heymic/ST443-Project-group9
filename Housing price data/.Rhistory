else{
df[,i][which(is.na(df[,i]))] <- "None"
}
}
df$KitchenQual[which(is.na(df$KitchenQual))] <- Mode(df$KitchenQual)
df[is.na(df$MSZoning),c('MSZoning','MSSubClass')]
table(df$MSZoning, df$MSSubClass)
df.combined$MSZoning[c(2217, 2905)] = 'RL'
df$MSZoning[c(2217, 2905)] = 'RL'
df$MSZoning[c(1916, 2251)] = 'RM'
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
if (sum(is.na(df[,i]) < 5)){
df[,i][which(is.na(df[,i]))] <- Mode(df[,i])
}
}
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- median(df$LotFrontage,na.rm = T)
df$MasVnrArea[which(is.na(df$MasVnrArea))] <- median(df$MasVnrArea,na.rm = T)
train = read.csv("train.csv", row.names = "Id", stringsAsFactors=FALSE)
testing_kaggle = read.csv("test.csv", row.names = "Id", stringsAsFactors=FALSE)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
hist(df$SalePrice)
colSums(sapply(df, is.na))
df[,c('PoolQC','PoolArea')] %>%
group_by(PoolQC) %>%
summarise(mean = mean(PoolArea), counts = n())
df[(df$PoolArea > 0) & is.na(df$PoolQC),c('PoolQC','PoolArea')]
df[2421,'PoolQC'] = 'Ex'
df[2504,'PoolQC'] = 'Ex'
df[2600,'PoolQC'] = 'Fa'
df$PoolQC[is.na(df$PoolQC)] = 'None'
garage.cols <- c('GarageArea', 'GarageCars', 'GarageQual', 'GarageFinish', 'GarageCond', 'GarageType')
df[is.na(df$GarageCond),garage.cols]
for(i in garage.cols){
if (sapply(df[i], is.numeric) == TRUE){
df[,i][which(is.na(df[,i]))] <- 0
}
else{
df[,i][which(is.na(df[,i]))] <- "None"
}
}
df$KitchenQual[which(is.na(df$KitchenQual))] <- Mode(df$KitchenQual)
df[is.na(df$MSZoning),c('MSZoning','MSSubClass')]
table(df$MSZoning, df$MSSubClass)
df$MSZoning[c(2217, 2905)] = 'RL'
df$MSZoning[c(1916, 2251)] = 'RM'
for(i in colnames(df[,sapply(df, is.character)])){
if (sum(is.na(df[,i]) < 5)){
df[,i][which(is.na(df[,i]))] <- Mode(df[,i])
}
}
for(i in colnames(df[,sapply(df, is.character)])){
if (sum(is.na(df[,i]) < 5)){
df[,i][which(is.na(df[,i]))] <- Mode(df[,i])
}
}
table(df$BsmtExposure)
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- median(df$LotFrontage,na.rm = T)
df$Alley[which(is.na(df$LotFrontage))] <- "None"
require(ggplot2) # for data visualization
require(stringr) #extracting string patterns
require(Matrix) # matrix transformations
require(glmnet) # ridge, lasso & elastinet
require(xgboost) # gbm
require(randomForest)
require(Metrics) # rmse
require(dplyr) # load this in last so plyr doens't overlap it
require(caret) # one hot encoding
require(scales) # plotting $$
require(e1071) # skewness
require(corrplot) # correlation plot
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
setwd("C:/Users/Michal/Documents/01- Master Degree/GitHub/ST443-Project-group9/Housing price data")
getwd()
train = read.csv("train.csv", row.names = "Id", stringsAsFactors=FALSE)
testing_kaggle = read.csv("test.csv", row.names = "Id", stringsAsFactors=FALSE)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
hist(df$SalePrice)
colSums(sapply(df, is.na))
df[,c('PoolQC','PoolArea')] %>%
group_by(PoolQC) %>%
summarise(mean = mean(PoolArea), counts = n())
df[2421,'PoolQC'] = 'Ex'
df[2504,'PoolQC'] = 'Ex'
df[2600,'PoolQC'] = 'Fa'
df$PoolQC[is.na(df$PoolQC)] = 'None'
length(which(df$GarageYrBlt == df$YearBuilt))
df[which(is.na(df$GarageYrBlt)), 'GarageYrBlt'] <- df[which(is.na(df$GarageYrBlt)), 'YearBuilt']
colSums(sapply(df, is.na))
garage.cols <- c('GarageArea', 'GarageCars', 'GarageQual', 'GarageFinish', 'GarageCond', 'GarageType')
df[is.na(df$GarageCond),garage.cols]
for(i in garage.cols){
if (sapply(df[i], is.numeric) == TRUE){
df[,i][which(is.na(df[,i]))] <- 0
}
else{
df[,i][which(is.na(df[,i]))] <- "None"
}
}
colSums(sapply(df, is.na))
df$KitchenQual[which(is.na(df$KitchenQual))] <- Mode(df$KitchenQual)
df[is.na(df$MSZoning),c('MSZoning','MSSubClass')]
table(df$MSZoning, df$MSSubClass)
df$MSZoning[c(2217, 2905)] = 'RL'
df$MSZoning[c(1916, 2251)] = 'RM'
colSums(sapply(df, is.na))
sum(is.na(df[,"MasVnrArea"])
colSums(sapply(df, is.na))
(sum(is.na(df[,"MasVnrType"]) < 5))
is.na(df$MasVnrType)
sum(is.na(df$MasVnrType))
(sum(is.na(df[,"MasVnrType"])) < 5)
for(i in colnames(df[,sapply(df, is.character)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- Mode(df[,i])
}
}
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.numeric)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- Median(df[,i])
}
}
for(i in colnames(df[,sapply(df, is.numeric)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- median(df[,i])
}
}
table(df$BsmtExposure)
colSums(sapply(df, is.na))
class(df$BsmtFinSF1)
for(i in colnames(df[,sapply(df, is.integer)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- median(df[,i])
}
}
class(df$BsmtFinSF1)
colSums(sapply(df, is.na))
class(df$BsmtFinSF1)
sum(is.na(df$BsmtFinSF1)) < 5
for(i in colnames(df[,sapply(df, is.integer)])){
print(i)
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- median(df[,i])
}
}
class(df$BsmtFinSF1)
median(df$BsmtFinSF1)
sum(is.na(df$BsmtFinSF1)) < 5
for(i in colnames(df[,sapply(df, is.integer)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- median(df[,i], na.rm = T)
}
}
colSums(sapply(df, is.na))
df[(df$MasVnrType = "*") & is.na(df$MasVnrArea),c('MasVnrArea','MasVnrType')]
df[is.na(df$MasVnrArea),c('MasVnrArea','MasVnrType')]
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
colSums(sapply(df, is.na))
df[,c('PoolQC','PoolArea')] %>%
group_by(PoolQC) %>%
summarise(mean = mean(PoolArea), counts = n())
df[(df$PoolArea > 0) & is.na(df$PoolQC),c('PoolQC','PoolArea')]
length(which(df$GarageYrBlt == df$YearBuilt))
df[which(is.na(df$GarageYrBlt)), 'GarageYrBlt'] <- df[which(is.na(df$GarageYrBlt)), 'YearBuilt']
garage.cols <- c('GarageArea', 'GarageCars', 'GarageQual', 'GarageFinish', 'GarageCond', 'GarageType')
df[is.na(df$GarageCond),garage.cols]
for(i in garage.cols){
if (sapply(df[i], is.numeric) == TRUE){
df[,i][which(is.na(df[,i]))] <- 0
}
else{
df[,i][which(is.na(df[,i]))] <- "None"
}
}
df$KitchenQual[which(is.na(df$KitchenQual))] <- Mode(df$KitchenQual)
df[is.na(df$MSZoning),c('MSZoning','MSSubClass')]
table(df$MSZoning, df$MSSubClass)
df$MSZoning[c(2217, 2905)] = 'RL'
df$MSZoning[c(1916, 2251)] = 'RM'
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- Mode(df[,i])
}
}
for(i in colnames(df[,sapply(df, is.integer)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- median(df[,i], na.rm = T)
}
}
colSums(sapply(df, is.na))
df$LotFrontage[which(is.na(df$LotFrontage))] <- median(df$LotFrontage,na.rm = T)
df$Alley[which(is.na(df$LotFrontage))] <- "None"
df[is.na(df$MasVnrArea),c('MasVnrArea','MasVnrType')]
df[is.na(df$MasVnrType) & (df$MasVnrArea > 0),c('MasVnrArea','MasVnrType')]
df[is.na(df$MasVnrType) & (df$MasVnrArea > 0), c('MasVnrArea','MasVnrType')]
df[(df$MasVnrArea > 0) & is.na(df$MasVnrType),c('MasVnrArea','MasVnrType')]
df[(df$MasVnrArea > 0) && is.na(df$MasVnrType),c('MasVnrArea','MasVnrType')]
df[((df$MasVnrArea > 0) & is.na(df$MasVnrType)),c('MasVnrArea','MasVnrType')]
df[(df$MasVnrArea > 0) & (is.na(df$MasVnrType)),c('MasVnrArea','MasVnrType')]
df[(df$MasVnrArea > 0) | (is.na(df$MasVnrType)),c('MasVnrArea','MasVnrType')]
df[(df$MasVnrArea > 0) & (is.na(df$MasVnrType)),c('MasVnrArea','MasVnrType')]
df[(df$MasVnrArea > 0) & (is.na(df$MasVnrType)),c('MasVnrArea','MasVnrType')]
df[2611, 'MasVnrType'] = 'BrkFace'
df$MasVnrType[is.na(df$MasVnrType)] = 'None'
df$MasVnrArea[is.na(df$MasVnrArea)] = 0
#df[(df$MasVnrArea > 0) & (is.na(df$MasVnrType)),c('MasVnrArea','MasVnrType')]
df[2611, 'MasVnrType'] = 'BrkFace'
df$MasVnrType[is.na(df$MasVnrType)] = 'None'
df$MasVnrArea[is.na(df$MasVnrArea)] = 0
colSums(sapply(df, is.na))
df$Alley[which(is.na(df$LotFrontage))] <- "None"
colSums(sapply(df, is.na))
df$Alley[which(is.na(df$Alley))] <- "None"
colSums(sapply(df, is.na))
df[,c('PoolQC','PoolArea')] %>%
group_by(PoolQC) %>%
summarise(mean = mean(PoolArea), counts = n())
df[(df$PoolArea > 0) & is.na(df$PoolQC),c('PoolQC','PoolArea')]
df[2421,'PoolQC'] = 'Ex'
df[2504,'PoolQC'] = 'Ex'
df[2600,'PoolQC'] = 'Fa'
df$PoolQC[is.na(df$PoolQC)] = 'None'
length(which(df$GarageYrBlt == df$YearBuilt))
df[which(is.na(df$GarageYrBlt)), 'GarageYrBlt'] <- df[which(is.na(df$GarageYrBlt)), 'YearBuilt']
garage.cols <- c('GarageArea', 'GarageCars', 'GarageQual', 'GarageFinish', 'GarageCond', 'GarageType')
df[is.na(df$GarageCond),garage.cols]
for(i in garage.cols){
if (sapply(df[i], is.numeric) == TRUE){
df[,i][which(is.na(df[,i]))] <- 0
}
else{
df[,i][which(is.na(df[,i]))] <- "None"
}
}
df$KitchenQual[which(is.na(df$KitchenQual))] <- Mode(df$KitchenQual)
df[is.na(df$MSZoning),c('MSZoning','MSSubClass')]
table(df$MSZoning, df$MSSubClass)
df$MSZoning[c(2217, 2905)] = 'RL'
df$MSZoning[c(1916, 2251)] = 'RM'
colSums(sapply(df, is.na))
colSums(sapply(df, is.na))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i][which(is.na(df[,i]))] <- "None"
}
colSums(sapply(df, is.na))
colSums(sapply(df, is.na))
colSums(sapply(df, is.na))
sum(df[is.na(df)])
colSums(sapply(df, is.na))
sum(is.na(df))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i] <- as.factor(df[,i])
}
# These are also categorical Variables
df$MSSubClass <- as.factor(df$MSSubClass)
str(df)
require(ggplot2) # for data visualization
require(stringr) #extracting string patterns
require(Matrix) # matrix transformations
require(glmnet) # ridge, lasso & elastinet
require(xgboost) # gbm
require(randomForest)
require(Metrics) # rmse
require(dplyr) # load this in last so plyr doens't overlap it
require(caret) # one hot encoding
require(scales) # plotting $$
require(e1071) # skewness
require(corrplot) # correlation plot
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
setwd("C:/Users/Michal/Documents/01- Master Degree/GitHub/ST443-Project-group9/Housing price data")
getwd()
train = read.csv("train.csv", row.names = "Id", stringsAsFactors=FALSE)
testing_kaggle = read.csv("test.csv", row.names = "Id", stringsAsFactors=FALSE)
#combining train and test data for quicker data prep
testing_kaggle$SalePrice <- NA
train$isTrain <- 1
testing_kaggle$isTrain <- 0
df <- rbind(train,testing_kaggle)
hist(df$SalePrice)
colSums(sapply(df, is.na))
df[,c('PoolQC','PoolArea')] %>%
group_by(PoolQC) %>%
summarise(mean = mean(PoolArea), counts = n())
df[(df$PoolArea > 0) & is.na(df$PoolQC),c('PoolQC','PoolArea')]
df[2421,'PoolQC'] = 'Ex'
df[2504,'PoolQC'] = 'Ex'
df[2600,'PoolQC'] = 'Fa'
df$PoolQC[is.na(df$PoolQC)] = 'None'
length(which(df$GarageYrBlt == df$YearBuilt))
df[which(is.na(df$GarageYrBlt)), 'GarageYrBlt'] <- df[which(is.na(df$GarageYrBlt)), 'YearBuilt']
garage.cols <- c('GarageArea', 'GarageCars', 'GarageQual', 'GarageFinish', 'GarageCond', 'GarageType')
df[is.na(df$GarageCond),garage.cols]
for(i in garage.cols){
if (sapply(df[i], is.numeric) == TRUE){
df[,i][which(is.na(df[,i]))] <- 0
}
else{
df[,i][which(is.na(df[,i]))] <- "None"
}
}
df$KitchenQual[which(is.na(df$KitchenQual))] <- Mode(df$KitchenQual)
df[is.na(df$MSZoning),c('MSZoning','MSSubClass')]
table(df$MSZoning, df$MSSubClass)
df$MSZoning[c(2217, 2905)] = 'RL'
df$MSZoning[c(1916, 2251)] = 'RM'
df$LotFrontage[which(is.na(df$LotFrontage))] <- median(df$LotFrontage,na.rm = T)
df$Alley[which(is.na(df$Alley))] <- "None"
#df[(df$MasVnrArea > 0) & (is.na(df$MasVnrType)),c('MasVnrArea','MasVnrType')]
df[2611, 'MasVnrType'] = 'BrkFace'
df$MasVnrType[is.na(df$MasVnrType)] = 'None'
df$MasVnrArea[is.na(df$MasVnrArea)] = 0
for(i in colnames(df[,sapply(df, is.character)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- Mode(df[,i])
}
}
for(i in colnames(df[,sapply(df, is.integer)])){
if (sum(is.na(df[,i])) < 5){
df[,i][which(is.na(df[,i]))] <- median(df[,i], na.rm = T)
}
}
for(i in colnames(df[,sapply(df, is.character)])){
df[,i][which(is.na(df[,i]))] <- "None"
}
colSums(sapply(df, is.na))
sum(is.na(df))
for(i in colnames(df[,sapply(df, is.character)])){
df[,i] <- as.factor(df[,i])
}
# These are also categorical Variables
df$MSSubClass <- as.factor(df$MSSubClass)
str(df)
train <- df[df$isTrain==1,]
test <- df[df$isTrain==0,]
train$isTrain <- NULL
test$isTrain <- NULL
smp_size = floor(0.8 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
train_Sales = three_crime_normalized[train_ind,]
train_Sales = train[train_ind,]
test_Sales = train[-train_ind,]
lm_fit_all = lm(SalesPrice ~., data = train_Sales)
View(train_Sales)
lm_fit_all = lm(SalePrice ~., data = train_Sales)
prediction <- predict(lm_fit_all, test_Sales, type="response")
View(test_Sales)
train_Sales = train[train_ind,]
test_Sales = train[-train_ind,]
y <- test_Sales$SalePrice
test_Sales$SalePrice <- NULL
lm_fit_all = lm(SalePrice ~., data = train_Sales)
prediction <- predict(lm_fit_all, test_Sales, type="response")
smp_size = floor(0.7 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
train_Sales = train[train_ind,]
test_Sales = train[-train_ind,]
y <- test_Sales$SalePrice
test_Sales$SalePrice <- NULL
lm_fit_all = lm(SalePrice ~., data = train_Sales)
prediction <- predict(lm_fit_all, test_Sales, type="response")
str(train_Sales)
str(test_Sales)
prediction <- predict(lm_fit_all, test_Sales, type="response")
lm_fit_all = lm(SalePrice ~., data = train_Sales)
prediction <- predict(lm_fit_all, test_Sales, type="response")
```{r}
colSums(sapply(test_Sales, is.na))
prediction <- predict(lm_fit_all, test_Sales, type="response")
levels(test_Sales)
levels(test_Sales$Condition2)
levels(test_Sales$Condition2)
levels(train_Sales$Condition2)
lm_fit_all = lm(SalePrice ~., data = train_Sales)
summary(lm_fit_all)
smp_size = floor(0.7 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
train <- df[df$isTrain==1,]
test <- df[df$isTrain==0,]
train$isTrain <- NULL
test$isTrain <- NULL
smp_size = floor(0.7 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
train_Sales = train[train_ind,]
test_Sales = train[-train_ind,]
y <- test_Sales$SalePrice
test_Sales$SalePrice <- NULL
train_Sales$SalePrice <- NULL
levels(test_Sales$Condition2)
levels(train_Sales$Condition2)
colSums(sapply(test_Sales, is.na))
lm_fit_all = lm(SalePrice ~., data = train_Sales)
train <- df[df$isTrain==1,]
test <- df[df$isTrain==0,]
train$isTrain <- NULL
test$isTrain <- NULL
smp_size = floor(0.7 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
train_Sales = train[train_ind,]
test_Sales = train[-train_ind,]
y <- test_Sales$SalePrice
test_Sales$SalePrice <- NULL
#train_Sales$SalePrice <- NULL
levels(test_Sales$Condition2)
levels(train_Sales$Condition2)
colSums(sapply(test_Sales, is.na))
lm_fit_all = lm(SalePrice ~., data = train_Sales)
summary(lm_fit_all)
prediction <- predict(lm_fit_all, test_Sales, type="response")
levels(test_Sales$Condition2) == levels(train_Sales$Condition2)
smp_size = floor(0.5 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
train_Sales = train[train_ind,]
test_Sales = train[-train_ind,]
y <- test_Sales$SalePrice
test_Sales$SalePrice <- NULL
#train_Sales$SalePrice <- NULL
levels(test_Sales$Condition2) == levels(train_Sales$Condition2)
colSums(sapply(test_Sales, is.na))
lm_fit_all = lm(SalePrice ~., data = train_Sales)
summary(lm_fit_all)
prediction <- predict(lm_fit_all, test_Sales, type="response")
lm_fit_all = lm(SalePrice ~ -Condition2., data = train_Sales)
lm_fit_all = lm(SalePrice ~ -Condition2 + ., data = train_Sales)
summary(lm_fit_all)
prediction <- predict(lm_fit_all, test_Sales, type="response")
lm_fit_all = lm(SalePrice ~ -Condition2 - Condition1 + ., data = train_Sales)
summary(lm_fit_all)
prediction <- predict(lm_fit_all, test_Sales, type="response")
dat2 <- data.frame(lapply(df, function(x) as.numeric(as.character(x))))
View(dat2)
View(dat2)
dat2 <- data.frame(lapply(df, function(x) as.numeric(x)))
View(dat2)
df <- data.frame(lapply(df, function(x) as.numeric(x)))
str(df)
library(boot)
library(leaps)
train <- df[df$isTrain==1,]
test <- df[df$isTrain==0,]
train$isTrain <- NULL
test$isTrain <- NULL
smp_size = floor(0.7 * nrow(train))
set.seed(1)
train_ind <-sample(seq_len(nrow(train)),smp_size, replace = F)
train_Sales = train[train_ind,]
test_Sales = train[-train_ind,]
y <- test_Sales$SalePrice
test_Sales$SalePrice <- NULL
#train_Sales$SalePrice <- NULL
levels(test_Sales$Condition2) == levels(train_Sales$Condition2)
colSums(sapply(test_Sales, is.na))
sum(is.na(test_Sales)
sum(is.na(test_Sales))
sum(is.na(test_Sales)) == 0
sum(is.na(test_Sales)) == 0
sum(is.na(train_Sales)) == 0
lm_fit_all = lm(SalePrice ~ ., data = train_Sales)
summary(lm_fit_all)
prediction <- predict(lm_fit_all, test_Sales, type="response")
RMSE(prediction, y)
RMSE(log(prediction), log(y))
RMSE(prediction, y)
rmse(prediction, y)
model_output <- cbind(y, prediction)
model_output$log_prediction <- log(model_output$prediction)
model_output <- cbind(y, prediction)
model_output$log_prediction <- log(model_output$prediction)
log(predcition)
log(prediction)
prediction
log(abs(prediction))
log(y)
RMSE(log(abs(prediction)),log(y))
RMSE(log(max(prediction, 0)),log(y))
RMSE(log(abs(prediction)),log(y))
prediction < 0
prediction(prediction < 0)
prediction[prediction < 0]
garage.cols <- c('GarageArea', 'GarageCars', 'GarageQual', 'GarageFinish', 'GarageCond', 'GarageType')
#df[is.na(df$GarageCond),garage.cols]
colSums(sapply(df, is.na))
sum(is.na(df)) == 1459
str(df)[:5]
head(str(df))
